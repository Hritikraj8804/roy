 2.1 Character stuffing

#include<stdio.h>
#include<string.h>

int main() {
    char data[30], stuffed[50] = "", temp[3], start_delim, end_delim;
    int i;

    printf("Enter data: ");
    scanf("%s", data);

    printf("Enter start delimiter: ");
    scanf(" %c", &start_delim);

    printf("Enter end delimiter: ");
    scanf(" %c", &end_delim);

    // Add start delimiter to stuffed string
    sprintf(stuffed, "%c", start_delim);

    // Process each character in the input data
    for (i = 0; data[i] != '\0'; i++) {
        // Check if the current character is a delimiter
        if (data[i] == start_delim || data[i] == end_delim) {
            // Stuff the character by adding it twice
            sprintf(temp, "%c%c", data[i], data[i]);
        } else {
            // If not a delimiter, just add the character
            sprintf(temp, "%c", data[i]);
        }
        strcat(stuffed, temp); // Add the processed character to stuffed data
    }

    // Add end delimiter to stuffed string
    sprintf(temp, "%c", end_delim);
    strcat(stuffed, temp);

    // Output the final stuffed data
    printf("After stuffing: %s\n", stuffed);
    
    return 0;
}




Enter data: ADITYA
Enter start delimiter: D
Enter end delimiter: S
After stuffing: DADDITYAS

====================================================================

2.1 bit 

#include<stdio.h>

int main() {
    int a[20], b[30], i, j, n, count;

    // Input frame size and bits
    printf("Enter frame size in bits: ");
    scanf("%d", &n);

    printf("Enter the frame in the form of 0 and 1: ");
    for (i = 0; i < n; i++) 
        scanf("%d", &a[i]);

    i = 0; // Index for original frame
    j = 0; // Index for stuffed frame
    count = 0; // Counter for consecutive 1s

    // Bit stuffing process
    while (i < n) {
        b[j] = a[i]; // Copy bit to stuffed array
        if (a[i] == 1) {
            count++; // Increment count for consecutive 1s
            if (count == 5) {
                j++; // Add extra 0 after 5 consecutive 1s
                b[j] = 0;
                count = 0; // Reset count
            }
        } else {
            count = 0; // Reset count when a 0 is encountered
        }
        i++;
        j++;
    }

    // Print the stuffed frame
    printf("After Bit Stuffing: ");
    for (i = 0; i < j; i++) 
        printf("%d ", b[i]);
    
    return 0;
}


Enter frame size in bits: 10
Enter the frame in the form of 0 and 1: 1 1 1 1 1 0 1 1 0 0
After Bit Stuffing: 1 1 1 1 1 0 0 1 1 0 0

====================================================================

6 GO-back:

#include<stdio.h>

int main() {
    int windowsize, sent = 0, ack, choice;

    // Input window size
    printf("Enter window size: \n");
    scanf("%d", &windowsize);

    // Loop to send frames
    while (1) {
        // Transmit frames
        for (int i = 0; sent < windowsize; i++) {
            printf("Frame %d has been transmitted.\n", sent);
            sent++;
            if (sent == windowsize) break;
        }

        // Prompt user for action
        printf("\n1 - Simulate lost/delayed ack\n2 - Exit\nChoice: ");
        scanf("%d", &choice);

        if (choice == 1) {
            printf("\nEnter the frame number to retransmit from: ");
            scanf("%d", &ack);

            // Retransmit frames starting from the given frame number
            for (int i = ack; i < windowsize; i++) {
                printf("Frame %d has been retransmitted.\n", i);
            }
        } else {
            // Exit the program
            return 0;
        }
    }
}


Enter window size: 
5
Frame 0 has been transmitted.
Frame 1 has been transmitted.
Frame 2 has been transmitted.
Frame 3 has been transmitted.
Frame 4 has been transmitted.

1 - Simulate lost/delayed ack
2 - Exit
Choice: 1

Enter the frame number to retransmit from: 3
Frame 3 has been retransmitted.
Frame 4 has been retransmitted.

1 - Simulate lost/delayed ack
2 - Exit
Choice:2

=================================================================

 7 sliding window

#include<stdio.h>

int main() {
    int windowsize, sent = 0, ack, choice;

    // Input window size
    printf("Enter window size: ");
    scanf("%d", &windowsize);

    while (1) {
        // Transmit frames
        for (int i = 0; i < windowsize && sent < windowsize; i++) {
            printf("Frame %d transmitted\n", sent);
            sent++;
        }

        // User input for acknowledgment or exit
        printf("\n1. Enter Acknowledgement\n2. Exit\nChoice: ");
        scanf("%d", &choice);

        if (choice == 1) {
            // Acknowledgement handling
            printf("Enter the frame number for acknowledgement: ");
            scanf("%d", &ack);

            if (ack >= 0 && ack < windowsize) {
                if (ack < sent) {
                    printf("Frame %d is already received\n", ack);
                } else {
                    printf("Frame %d is acknowledged\n", ack);
                }

                if (ack == windowsize - 1) {
                    printf("All frames have been acknowledged\n");
                    break;
                }
            } else {
                printf("Invalid acknowledgement frame number\n");
            }
        } else if (choice == 2) {
            // Exit the program
            printf("Exiting...\n");
            break;
        } else {
            printf("Invalid choice, please enter 1 or 2\n");
        }
    }

    return 0;
}


Enter window size: 5
Frame 0 transmitted
Frame 1 transmitted
Frame 2 transmitted
Frame 3 transmitted
Frame 4 transmitted

1. Enter Acknowledgement
2. Exit
Choice: 1
Enter the frame number for acknowledgement: 2
Frame 2 is already received
1. Enter Acknowledgement
2. Exit
Choice: 1
Enter the frame number for acknowledgement: 4
Frame 4 is acknowledged
All frames have been acknowledged

===================================================================

 8 stop and wait

#include<stdio.h>

int main() {
    int size, sent = 0, ack;

    // Input number of frames
    printf("Enter number of frames to be transferred: ");
    scanf("%d", &size);

    while (sent < size) {
        printf("Frame %d has been transmitted.\n", sent);

        // Loop for acknowledgment or retransmission
        do {
            printf("Enter your choice (1 for ACK, 2 for NACK): ");
            scanf("%d", &ack);

            if (ack == 1) {
                printf("Frame %d has been acknowledged.\n", sent);
            } else if (ack == 2) {
                printf("Frame %d not acknowledged. Retransmitting...\n", sent);
            } else {
                printf("Invalid choice. Please enter 1 for ACK or 2 for NACK.\n");
            }
        } while (ack != 1);  // Continue retransmitting until ACK is received

        sent++;
    }

    printf("All frames have been transmitted and acknowledged.\n");
    return 0;
}


Enter number of frames to be transferred: 3
Frame 0 has been transmitted.
Enter your choice (1 for ACK, 2 for NACK): 2
Frame 0 not acknowledged. Retransmitting...
Enter your choice (1 for ACK, 2 for NACK): 1
Frame 0 has been acknowledged.

Frame 1 has been transmitted.
Enter your choice (1 for ACK, 2 for NACK): 1
Frame 1 has been acknowledged.

Frame 2 has been transmitted.
Enter your choice (1 for ACK, 2 for NACK): 2
Frame 2 not acknowledged. Retransmitting...
Enter your choice (1 for ACK, 2 for NACK): 1
Frame 2 has been acknowledged.

All frames have been transmitted and acknowledged.

======================================================================

11 distance vector

#include <stdio.h>

struct node {
    unsigned dist[20];  // Distance from the source node
    unsigned from[20];  // Predecessor node
} rt[10];

int main() {
    int costmat[20][20], nodes, i, j, k, count;

    // Input number of nodes
    printf("Enter the number of nodes: ");
    scanf("%d", &nodes);

    // Input cost matrix
    printf("Enter the cost matrix:\n");
    for (i = 0; i < nodes; i++) {
        for (j = 0; j < nodes; j++) {
            scanf("%d", &costmat[i][j]);
            if (i == j) costmat[i][j] = 0;  // Distance to self is zero
            rt[i].dist[j] = costmat[i][j];  // Initialize distance from cost matrix
            rt[i].from[j] = j;               // Initialize predecessor
        }
    }

    // Bellman-Ford algorithm
    do {
        count = 0;
        for (i = 0; i < nodes; i++) {
            for (j = 0; j < nodes; j++) {
                for (k = 0; k < nodes; k++) {
                    if (rt[i].dist[j] > costmat[i][k] + rt[k].dist[j]) {
                        rt[i].dist[j] = costmat[i][k] + rt[k].dist[j];
                        rt[i].from[j] = k;
                        count++;
                    }
                }
            }
        }
    } while (count != 0);

    // Output results
    for (i = 0; i < nodes; i++) {
        printf("\nFor router %d:\n", i + 1);
        for (j = 0; j < nodes; j++) {
            printf("Node %d via %d Distance %d\n", j + 1, rt[i].from[j] + 1, rt[i].dist[j]);
        }
    }

    return 0;
}


Enter the number of nodes: 3
Enter the cost matrix:
0 1 4
1 0 2
4 2 0

For router 1:
Node 1 via 1 Distance 0
Node 2 via 2 Distance 1
Node 3 via 2 Distance 3

For router 2:
Node 1 via 1 Distance 1
Node 2 via 2 Distance 0
Node 3 via 3 Distance 2

For router 3:
Node 1 via 2 Distance 3
Node 2 via 2 Distance 2
Node 3 via 3 Distance 0
